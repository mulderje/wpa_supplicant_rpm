Inspired by the following commit; the rest of the patch for custom scan
event processing does not apply to wpa_supplicant 0.5.10.

commit fd630bc183fb79d0a14b5f3a346544f3d277bd05
Author: Jouni Malinen <jouni.malinen@atheros.com>
Date:   Wed Aug 27 09:52:16 2008 +0300

    Fixed WEXT scan result parser to not crash on invalid IEs (zero len buffer)
    
    If IWEVGENIE or custom event wpa_ie/rsn_ie is received in scan with empty
    buffer, the previous version ended up calling realloc(NULL, 0) which seems
    to return a non-NULL value in some cases. When this return value is passed
    again into realloc with realloc(ptr, 0), the returned value could be NULL.
    If the ptr is then freed (os_free(data.ie) in SIOCGIWAP handling), glibc
    may crash due to invalid pointer being freed (or double-freed?). The
    non-NULL realloc(NULL, 0) return value from glibc looks a bit odd behavior,
    but anyway, better avoid this case completely and just skip the IE events
    that have an empty buffer.
    
    This issue should not show up with drivers that produce proper scan results
    since the IEs will always include the two-octet header. However, it seems
    to be possible to see this when using 64-bit kernel and 32-bit userspace
    with incorrect compat-ioctl processing.

diff -up wpa_supplicant-0.5.10/driver_wext.c.scan-parse-crash wpa_supplicant-0.5.10/driver_wext.c
--- wpa_supplicant-0.5.10/driver_wext.c.scan-parse-crash	2008-08-29 11:16:09.000000000 -0400
+++ wpa_supplicant-0.5.10/driver_wext.c	2008-08-29 11:17:43.000000000 -0400
@@ -1302,6 +1302,8 @@ int wpa_driver_wext_get_scan_results(voi
 		case IWEVGENIE:
 			if (ap_num >= max_size)
 				break;
+			if (iwe->u.data.length == 0)
+				break;
 			gpos = genie = custom;
 			gend = genie + iwe->u.data.length;
 			if (gend > end) {

